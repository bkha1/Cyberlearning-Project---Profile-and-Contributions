package cyber.learning.project.shared;

import java.io.Serializable;



/**
 * A container generated by the server-side aspect of a RPC invocation which
 * contains either the result from a successful execution or a caught error
 * which halted the execution.
 *
 * @param <T> the type of the result
 */
@SuppressWarnings("serial")
public final class CallbackPayload<T> implements Serializable
{
  public CallbackPayload()
  {
    // Appease the GWT compiler with a nullary constructor.
  }


  public CallbackPayload(T result)
  {
    result_ = result;
    error_ = null;
  }


  public CallbackPayload(Throwable error)
  {
    result_ = null;
    error_ = error;
  }


  public boolean hasResult()
  {
    return result_ != null;
  }


  public T getResult()
  {
    return result_;
  }


  public Throwable getError()
  {
    return error_;
  }


  private T result_;
  private Throwable error_;
}